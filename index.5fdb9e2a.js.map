{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_define_property.js","node_modules/@swc/helpers/esm/_sliced_to_array.js","node_modules/@swc/helpers/esm/_array_with_holes.js","node_modules/@swc/helpers/esm/_iterable_to_array_limit.js","node_modules/@swc/helpers/esm/_non_iterable_rest.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js","node_modules/@swc/helpers/esm/_array_like_to_array.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$2996f80ef42b8419(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$d60067ff2358eee8(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0(obj, key, value) {\n    if (key in obj) Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n    });\n    else obj[key] = value;\n    return obj;\n}\n\n\nfunction $09cbfe85151ea6c6$export$e6256bf45c68d561(arr) {\n    if (Array.isArray(arr)) return arr;\n}\n\n\nfunction $8ca2848f896a6803$export$2fd15edff6687200(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\n\n\nfunction $a0bc1859061deae1$export$60dbc22abd7da546() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\nfunction $c3b10a83b523f372$export$79e617b1955a2616(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $d4f69c5c6c4654b1$export$a5be06335b3a083c(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n}\n\n\nfunction $efec029548ccee7f$export$fdf2a89c76341bbf(arr, i) {\n    return (0, $09cbfe85151ea6c6$export$e6256bf45c68d561)(arr) || (0, $8ca2848f896a6803$export$2fd15edff6687200)(arr, i) || (0, $d4f69c5c6c4654b1$export$a5be06335b3a083c)(arr, i) || (0, $a0bc1859061deae1$export$60dbc22abd7da546)();\n}\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        (0, $8713978b2328d32b$export$2996f80ef42b8419)(this, Game);\n        this.initialState = initialState;\n        this.state = JSON.parse(JSON.stringify(initialState));\n        this.status = Game.STATUS_IDLE;\n        this.score = 0;\n    }\n    (0, $4fc75ccb937ab1df$export$d60067ff2358eee8)(Game, [\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var state = this.getState();\n                // below I update the state if ArrowLeft was pressed\n                for(var row = 0; row < 4; row++){\n                    var cache = [];\n                    // here I push all digits (except 0) of current row in the state\n                    // to the cache array\n                    for(var cell = 0; cell < 4; cell++){\n                        var currentDigit = state[row][cell];\n                        if (!currentDigit) continue;\n                        cache.push(currentDigit);\n                    }\n                    // here I sum equal numbers in the cache array and update the score\n                    for(var i = 0; i < cache.length; i++){\n                        var currentDigit1 = cache[i];\n                        var nextDigit = i + 1 < cache.length ? cache[i + 1] : null;\n                        if (!nextDigit) break;\n                        if (currentDigit1 === nextDigit) {\n                            var prevScore = this.getScore();\n                            var currentScore = prevScore + currentDigit1 * 2;\n                            this.score = currentScore;\n                            cache.splice(i, 2, currentDigit1 * 2);\n                        }\n                    }\n                    // if row doesn't change then go to the next row\n                    if (cache.length === 4) continue;\n                    // here I need to fill cache array with 0 for equality cache.length === 4\n                    while(cache.length < 4)cache.push(0);\n                    // here I rewrite current row in the state\n                    for(var cell1 = 0; cell1 < 4; cell1++)state[row][cell1] = cache[cell1];\n                }\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                // below I update the state if ArrowRight was pressed\n                this.reverseStateByRows();\n                this.moveLeft();\n                this.reverseStateByRows();\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                // below I update the state if ArrowUp was pressed\n                this.rotateStateBackwardBy90Deg();\n                this.moveLeft();\n                this.rotateStateForwardBy90Deg();\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                // below I update the state if ArrowDown was pressed\n                this.rotateStateForwardBy90Deg();\n                this.moveLeft();\n                this.rotateStateBackwardBy90Deg();\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.state;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                this.state = JSON.parse(JSON.stringify(this.initialState));\n                this.status = Game.STATUS_PLAYING;\n                this.score = 0;\n                this.addRandomDigitToEmptyCell(2);\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.state = JSON.parse(JSON.stringify(this.initialState));\n                this.status = Game.STATUS_IDLE;\n                this.score = 0;\n            }\n        },\n        {\n            // Add your own methods here\n            key: \"rotateStateBackwardBy90Deg\",\n            value: function rotateStateBackwardBy90Deg() {\n                var state = this.getState();\n                var stateCopy = JSON.parse(JSON.stringify(state));\n                for(var j = 3; j >= 0; j--)for(var i = 0; i < 4; i++)state[3 - j][i] = stateCopy[i][j];\n            }\n        },\n        {\n            key: \"rotateStateForwardBy90Deg\",\n            value: function rotateStateForwardBy90Deg() {\n                var state = this.getState();\n                var stateCopy = JSON.parse(JSON.stringify(state));\n                for(var i = 3; i >= 0; i--)for(var j = 0; j < 4; j++)state[j][3 - i] = stateCopy[i][j];\n            }\n        },\n        {\n            key: \"reverseStateByRows\",\n            value: function reverseStateByRows() {\n                var state = this.getState();\n                for(var row = 0; row < 4; row++)state[row].reverse();\n            }\n        },\n        {\n            key: \"checkIsPlayerWin\",\n            value: function checkIsPlayerWin() {\n                var state = this.getState();\n                var isPlayerWin = false;\n                for(var row = 0; row < 4; row++)if (state[row].includes(2048)) isPlayerWin = true;\n                return isPlayerWin;\n            }\n        },\n        {\n            key: \"checkIsPlayerLose\",\n            value: function checkIsPlayerLose() {\n                var state = this.getState();\n                var isPlayerLose = false;\n                var hasEmptyCell = false;\n                var hasPairedDigits = false;\n                for(var row = 0; row < 4; row++)if (state[row].includes(0)) {\n                    hasEmptyCell = true;\n                    break;\n                }\n                // here I try to find paired digits in rows\n                for(var row1 = 0; row1 < 4; row1++){\n                    for(var cell = 0; cell < 3; cell++)if (state[row1][cell] === state[row1][cell + 1]) {\n                        hasPairedDigits = true;\n                        break;\n                    }\n                }\n                // here I try to find paired digits in columns\n                for(var col = 0; col < 4; col++){\n                    for(var row2 = 0; row2 < 3; row2++)if (state[row2][col] === state[row2 + 1][col]) {\n                        hasPairedDigits = true;\n                        break;\n                    }\n                }\n                if (!hasEmptyCell && !hasPairedDigits) isPlayerLose = true;\n                return isPlayerLose;\n            }\n        },\n        {\n            key: \"addRandomDigitToEmptyCell\",\n            value: function addRandomDigitToEmptyCell(digitsCount) {\n                var state = this.getState();\n                var addedDigitsCount = 0;\n                while(addedDigitsCount < digitsCount){\n                    var _this_getRandomCoordinates = (0, $efec029548ccee7f$export$fdf2a89c76341bbf)(this.getRandomCoordinates(), 2), row = _this_getRandomCoordinates[0], cell = _this_getRandomCoordinates[1];\n                    var randomDigit = this.getRandomDigit();\n                    if (state[row][cell]) continue;\n                    state[row][cell] = randomDigit;\n                    addedDigitsCount++;\n                }\n            }\n        },\n        {\n            key: \"getRandomCoordinates\",\n            value: function getRandomCoordinates() {\n                var rowCoordinate = Math.floor(Math.random() * 4);\n                var cellCoordinate = Math.floor(Math.random() * 4);\n                return [\n                    rowCoordinate,\n                    cellCoordinate\n                ];\n            }\n        },\n        {\n            key: \"getRandomDigit\",\n            value: function getRandomDigit() {\n                var randomNumber1To100 = Math.floor(Math.random() * 100) + 1;\n                if (randomNumber1To100 > 90) return 4;\n                return 2;\n            }\n        }\n    ]);\n    return Game;\n}();\n(0, $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0)($3d28d7f1aac198f5$var$Game, \"STATUS_IDLE\", \"idle\");\n(0, $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0)($3d28d7f1aac198f5$var$Game, \"STATUS_PLAYING\", \"playing\");\n(0, $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0)($3d28d7f1aac198f5$var$Game, \"STATUS_WIN\", \"win\");\n(0, $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0)($3d28d7f1aac198f5$var$Game, \"STATUS_LOSE\", \"lose\");\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\n// Write your code here\nvar $197cd56b15c33885$var$table = document.querySelector(\"table\");\nvar $197cd56b15c33885$var$tbody = $197cd56b15c33885$var$table.tBodies[0];\nvar $197cd56b15c33885$var$button = document.querySelector(\"button\");\nvar $197cd56b15c33885$var$startMessage = document.querySelector(\".message-start\");\nvar $197cd56b15c33885$var$loseMessage = document.querySelector(\".message-lose\");\nvar $197cd56b15c33885$var$winMessage = document.querySelector(\".message-win\");\nvar $197cd56b15c33885$var$score = document.querySelector(\".game-score\");\n$197cd56b15c33885$var$button.addEventListener(\"click\", function() {\n    if ($197cd56b15c33885$var$button.classList.contains(\"restart\")) {\n        $197cd56b15c33885$var$game.restart();\n        $197cd56b15c33885$var$button.classList.remove(\"restart\");\n        $197cd56b15c33885$var$button.classList.add(\"start\");\n        $197cd56b15c33885$var$button.textContent = \"Start\";\n        $197cd56b15c33885$var$startMessage.classList.remove(\"hidden\");\n        $197cd56b15c33885$var$loseMessage.classList.add(\"hidden\");\n        $197cd56b15c33885$var$winMessage.classList.add(\"hidden\");\n        $197cd56b15c33885$var$score.innerText = \"0\";\n        $197cd56b15c33885$var$updateTable();\n        return;\n    }\n    $197cd56b15c33885$var$game.start();\n    $197cd56b15c33885$var$startMessage.classList.add(\"hidden\");\n    $197cd56b15c33885$var$updateTable();\n});\ndocument.addEventListener(\"keydown\", function(e) {\n    var key = e.key;\n    if (key === \"ArrowRight\" || key === \"ArrowLeft\" || key === \"ArrowUp\" || key === \"ArrowDown\") {\n        var state = $197cd56b15c33885$var$game.getState();\n        var gameStatus = $197cd56b15c33885$var$game.getStatus();\n        if (gameStatus === $3d28d7f1aac198f5$exports.STATUS_IDLE || gameStatus === $3d28d7f1aac198f5$exports.STATUS_LOSE || gameStatus === $3d28d7f1aac198f5$exports.STATUS_WIN) return;\n        // after the first move I change the Start button to Restart button\n        if ($197cd56b15c33885$var$button.classList.contains(\"start\")) {\n            $197cd56b15c33885$var$button.classList.remove(\"start\");\n            $197cd56b15c33885$var$button.classList.add(\"restart\");\n            $197cd56b15c33885$var$button.textContent = \"Restart\";\n        }\n        var currentStateString = JSON.stringify(state);\n        switch(key){\n            case \"ArrowRight\":\n                $197cd56b15c33885$var$game.moveRight();\n                break;\n            case \"ArrowLeft\":\n                $197cd56b15c33885$var$game.moveLeft();\n                break;\n            case \"ArrowUp\":\n                $197cd56b15c33885$var$game.moveUp();\n                break;\n            case \"ArrowDown\":\n                $197cd56b15c33885$var$game.moveDown();\n                break;\n            default:\n                break;\n        }\n        var nextStateString = JSON.stringify(state);\n        // if state doesn't change after move, then do nothing\n        if (currentStateString === nextStateString) return;\n        // here I update the score in the table\n        $197cd56b15c33885$var$score.innerText = \"\".concat($197cd56b15c33885$var$game.getScore());\n        // here I add 1 new digit to an empty cell and update the table\n        $197cd56b15c33885$var$game.addRandomDigitToEmptyCell(1);\n        $197cd56b15c33885$var$updateTable();\n        // here I need to check if 2048 exist\n        var isPlayerWin = $197cd56b15c33885$var$game.checkIsPlayerWin();\n        if (isPlayerWin) {\n            $197cd56b15c33885$var$game.status = $3d28d7f1aac198f5$exports.STATUS_WIN;\n            $197cd56b15c33885$var$winMessage.classList.remove(\"hidden\");\n            return;\n        }\n        // if there are no more available moves, a game over message is shown\n        var isPlayerLose = $197cd56b15c33885$var$game.checkIsPlayerLose();\n        if (isPlayerLose) {\n            $197cd56b15c33885$var$game.status = $3d28d7f1aac198f5$exports.STATUS_LOSE;\n            $197cd56b15c33885$var$loseMessage.classList.remove(\"hidden\");\n        }\n    }\n});\nfunction $197cd56b15c33885$var$updateTable() {\n    var state = $197cd56b15c33885$var$game.getState();\n    for(var row = 0; row < 4; row++)for(var cell = 0; cell < 4; cell++){\n        var currentDigit = state[row][cell];\n        if (!currentDigit) {\n            $197cd56b15c33885$var$tbody.rows[row].cells[cell].className = \"field-cell\";\n            $197cd56b15c33885$var$tbody.rows[row].cells[cell].innerText = \"\";\n            continue;\n        }\n        $197cd56b15c33885$var$tbody.rows[row].cells[cell].className = \"field-cell field-cell--\".concat(currentDigit);\n        $197cd56b15c33885$var$tbody.rows[row].cells[cell].innerText = \"\".concat(currentDigit);\n    }\n}\n\n})();\n//# sourceMappingURL=index.5fdb9e2a.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\n// Write your code here\n\nconst table = document.querySelector('table');\nconst tbody = table.tBodies[0];\nconst button = document.querySelector('button');\n\nconst startMessage = document.querySelector('.message-start');\nconst loseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\nconst score = document.querySelector('.game-score');\n\nbutton.addEventListener('click', () => {\n  if (button.classList.contains('restart')) {\n    game.restart();\n\n    button.classList.remove('restart');\n    button.classList.add('start');\n    button.textContent = 'Start';\n\n    startMessage.classList.remove('hidden');\n    loseMessage.classList.add('hidden');\n    winMessage.classList.add('hidden');\n\n    score.innerText = '0';\n\n    updateTable();\n\n    return;\n  }\n\n  game.start();\n\n  startMessage.classList.add('hidden');\n\n  updateTable();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  const key = e.key;\n\n  if (\n    key === 'ArrowRight' ||\n    key === 'ArrowLeft' ||\n    key === 'ArrowUp' ||\n    key === 'ArrowDown'\n  ) {\n    const state = game.getState();\n    const gameStatus = game.getStatus();\n\n    if (\n      gameStatus === Game.STATUS_IDLE ||\n      gameStatus === Game.STATUS_LOSE ||\n      gameStatus === Game.STATUS_WIN\n    ) {\n      return;\n    }\n\n    // after the first move I change the Start button to Restart button\n\n    if (button.classList.contains('start')) {\n      button.classList.remove('start');\n      button.classList.add('restart');\n      button.textContent = 'Restart';\n    }\n\n    const currentStateString = JSON.stringify(state);\n\n    switch (key) {\n      case 'ArrowRight':\n        game.moveRight();\n\n        break;\n\n      case 'ArrowLeft':\n        game.moveLeft();\n\n        break;\n\n      case 'ArrowUp':\n        game.moveUp();\n\n        break;\n\n      case 'ArrowDown':\n        game.moveDown();\n\n        break;\n\n      default:\n        break;\n    }\n\n    const nextStateString = JSON.stringify(state);\n\n    // if state doesn't change after move, then do nothing\n\n    if (currentStateString === nextStateString) {\n      return;\n    }\n\n    // here I update the score in the table\n\n    score.innerText = `${game.getScore()}`;\n\n    // here I add 1 new digit to an empty cell and update the table\n\n    game.addRandomDigitToEmptyCell(1);\n    updateTable();\n\n    // here I need to check if 2048 exist\n\n    const isPlayerWin = game.checkIsPlayerWin();\n\n    if (isPlayerWin) {\n      game.status = Game.STATUS_WIN;\n      winMessage.classList.remove('hidden');\n\n      return;\n    }\n\n    // if there are no more available moves, a game over message is shown\n\n    const isPlayerLose = game.checkIsPlayerLose();\n\n    if (isPlayerLose) {\n      game.status = Game.STATUS_LOSE;\n      loseMessage.classList.remove('hidden');\n    }\n  }\n});\n\nfunction updateTable() {\n  const state = game.getState();\n\n  for (let row = 0; row < 4; row++) {\n    for (let cell = 0; cell < 4; cell++) {\n      const currentDigit = state[row][cell];\n\n      if (!currentDigit) {\n        tbody.rows[row].cells[cell].className = 'field-cell';\n        tbody.rows[row].cells[cell].innerText = '';\n\n        continue;\n      }\n\n      tbody.rows[row].cells[cell].className =\n        `field-cell field-cell--${currentDigit}`;\n\n      tbody.rows[row].cells[cell].innerText = `${currentDigit}`;\n    }\n  }\n}\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.initialState = initialState;\n    this.state = JSON.parse(JSON.stringify(initialState));\n    this.status = Game.STATUS_IDLE;\n    this.score = 0;\n  }\n\n  static STATUS_IDLE = 'idle';\n  static STATUS_PLAYING = 'playing';\n  static STATUS_WIN = 'win';\n  static STATUS_LOSE = 'lose';\n\n  moveLeft() {\n    const state = this.getState();\n\n    // below I update the state if ArrowLeft was pressed\n\n    for (let row = 0; row < 4; row++) {\n      const cache = [];\n\n      // here I push all digits (except 0) of current row in the state\n      // to the cache array\n\n      for (let cell = 0; cell < 4; cell++) {\n        const currentDigit = state[row][cell];\n\n        if (!currentDigit) {\n          continue;\n        }\n\n        cache.push(currentDigit);\n      }\n\n      // here I sum equal numbers in the cache array and update the score\n\n      for (let i = 0; i < cache.length; i++) {\n        const currentDigit = cache[i];\n        const nextDigit = i + 1 < cache.length ? cache[i + 1] : null;\n\n        if (!nextDigit) {\n          break;\n        }\n\n        if (currentDigit === nextDigit) {\n          const prevScore = this.getScore();\n          const currentScore = prevScore + currentDigit * 2;\n\n          this.score = currentScore;\n\n          cache.splice(i, 2, currentDigit * 2);\n        }\n      }\n\n      // if row doesn't change then go to the next row\n\n      if (cache.length === 4) {\n        continue;\n      }\n\n      // here I need to fill cache array with 0 for equality cache.length === 4\n\n      while (cache.length < 4) {\n        cache.push(0);\n      }\n\n      // here I rewrite current row in the state\n\n      for (let cell = 0; cell < 4; cell++) {\n        state[row][cell] = cache[cell];\n      }\n    }\n  }\n\n  moveRight() {\n    // below I update the state if ArrowRight was pressed\n\n    this.reverseStateByRows();\n    this.moveLeft();\n    this.reverseStateByRows();\n  }\n\n  moveUp() {\n    // below I update the state if ArrowUp was pressed\n\n    this.rotateStateBackwardBy90Deg();\n    this.moveLeft();\n    this.rotateStateForwardBy90Deg();\n  }\n\n  moveDown() {\n    // below I update the state if ArrowDown was pressed\n\n    this.rotateStateForwardBy90Deg();\n    this.moveLeft();\n    this.rotateStateBackwardBy90Deg();\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.state = JSON.parse(JSON.stringify(this.initialState));\n    this.status = Game.STATUS_PLAYING;\n    this.score = 0;\n    this.addRandomDigitToEmptyCell(2);\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.state = JSON.parse(JSON.stringify(this.initialState));\n    this.status = Game.STATUS_IDLE;\n    this.score = 0;\n  }\n\n  // Add your own methods here\n\n  rotateStateBackwardBy90Deg() {\n    const state = this.getState();\n    const stateCopy = JSON.parse(JSON.stringify(state));\n\n    for (let j = 3; j >= 0; j--) {\n      for (let i = 0; i < 4; i++) {\n        state[3 - j][i] = stateCopy[i][j];\n      }\n    }\n  }\n\n  rotateStateForwardBy90Deg() {\n    const state = this.getState();\n    const stateCopy = JSON.parse(JSON.stringify(state));\n\n    for (let i = 3; i >= 0; i--) {\n      for (let j = 0; j < 4; j++) {\n        state[j][3 - i] = stateCopy[i][j];\n      }\n    }\n  }\n\n  reverseStateByRows() {\n    const state = this.getState();\n\n    for (let row = 0; row < 4; row++) {\n      state[row].reverse();\n    }\n  }\n\n  checkIsPlayerWin() {\n    const state = this.getState();\n    let isPlayerWin = false;\n\n    for (let row = 0; row < 4; row++) {\n      if (state[row].includes(2048)) {\n        isPlayerWin = true;\n      }\n    }\n\n    return isPlayerWin;\n  }\n\n  checkIsPlayerLose() {\n    const state = this.getState();\n\n    let isPlayerLose = false;\n    let hasEmptyCell = false;\n    let hasPairedDigits = false;\n\n    for (let row = 0; row < 4; row++) {\n      if (state[row].includes(0)) {\n        hasEmptyCell = true;\n\n        break;\n      }\n    }\n\n    // here I try to find paired digits in rows\n\n    for (let row = 0; row < 4; row++) {\n      for (let cell = 0; cell < 3; cell++) {\n        if (state[row][cell] === state[row][cell + 1]) {\n          hasPairedDigits = true;\n\n          break;\n        }\n      }\n    }\n\n    // here I try to find paired digits in columns\n\n    for (let col = 0; col < 4; col++) {\n      for (let row = 0; row < 3; row++) {\n        if (state[row][col] === state[row + 1][col]) {\n          hasPairedDigits = true;\n\n          break;\n        }\n      }\n    }\n\n    if (!hasEmptyCell && !hasPairedDigits) {\n      isPlayerLose = true;\n    }\n\n    return isPlayerLose;\n  }\n\n  addRandomDigitToEmptyCell(digitsCount) {\n    const state = this.getState();\n    let addedDigitsCount = 0;\n\n    while (addedDigitsCount < digitsCount) {\n      const [row, cell] = this.getRandomCoordinates();\n      const randomDigit = this.getRandomDigit();\n\n      if (state[row][cell]) {\n        continue;\n      }\n\n      state[row][cell] = randomDigit;\n\n      addedDigitsCount++;\n    }\n  }\n\n  getRandomCoordinates() {\n    const rowCoordinate = Math.floor(Math.random() * 4);\n    const cellCoordinate = Math.floor(Math.random() * 4);\n\n    return [rowCoordinate, cellCoordinate];\n  }\n\n  getRandomDigit() {\n    const randomNumber1To100 = Math.floor(Math.random() * 100) + 1;\n\n    if (randomNumber1To100 > 90) {\n      return 4;\n    }\n\n    return 2;\n  }\n}\n\nmodule.exports = Game;\n","export function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","export function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n    } else obj[key] = value;\n\n    return obj;\n}\nexport { _define_property as _ };\n","import { _array_with_holes } from \"./_array_with_holes.js\";\nimport { _iterable_to_array_limit } from \"./_iterable_to_array_limit.js\";\nimport { _non_iterable_rest } from \"./_non_iterable_rest.js\";\nimport { _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nexport function _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nexport { _sliced_to_array as _ };\n","export function _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nexport { _array_with_holes as _ };\n","export function _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n    if (_i == null) return;\n\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n\n    try {\n        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally {\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally {\n            if (_d) throw _e;\n        }\n    }\n\n    return _arr;\n}\nexport { _iterable_to_array_limit as _ };\n","export function _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_rest as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n","export function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n"],"names":["$3d28d7f1aac198f5$exports","$cd5a47cf8ef6d766$export$1e71eb4bef00f6b0","obj","key","value","Object","defineProperty","enumerable","configurable","writable","$c3b10a83b523f372$export$79e617b1955a2616","arr","len","length","i","arr2","Array","$3d28d7f1aac198f5$var$Game","protoProps","Game","initialState","arguments","instance","Constructor","TypeError","state","JSON","parse","stringify","status","STATUS_IDLE","score","getState","row","cache","cell","currentDigit","push","currentDigit1","nextDigit","currentScore","prevScore","getScore","splice","cell1","reverseStateByRows","moveLeft","rotateStateBackwardBy90Deg","rotateStateForwardBy90Deg","STATUS_PLAYING","addRandomDigitToEmptyCell","stateCopy","j","reverse","isPlayerWin","includes","isPlayerLose","hasEmptyCell","hasPairedDigits","row1","col","row2","digitsCount","addedDigitsCount","_this_getRandomCoordinates","isArray","getRandomCoordinates","_s","_e","_i","Symbol","iterator","_arr","_n","_d","call","next","done","err","o","minLen","n","prototype","toString","slice","constructor","name","from","test","randomDigit","getRandomDigit","Math","floor","random","randomNumber1To100","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","$197cd56b15c33885$var$game","$197cd56b15c33885$var$tbody","$197cd56b15c33885$var$table","document","querySelector","tBodies","$197cd56b15c33885$var$button","$197cd56b15c33885$var$startMessage","$197cd56b15c33885$var$loseMessage","$197cd56b15c33885$var$winMessage","$197cd56b15c33885$var$score","$197cd56b15c33885$var$updateTable","rows","cells","className","innerText","concat","addEventListener","classList","contains","restart","remove","add","textContent","start","e","gameStatus","getStatus","STATUS_LOSE","STATUS_WIN","currentStateString","moveRight","moveUp","moveDown","checkIsPlayerWin","checkIsPlayerLose"],"version":3,"file":"index.5fdb9e2a.js.map"}